#!/usr/bin/env python

from curses import COLOR_BLUE, COLOR_RED, color_pair, curs_set, napms, newwin, start_color, wrapper, use_default_colors, KEY_ENTER, init_pair
from curses.textpad import Textbox
from string import ascii_letters

from src.game import Game
from src.ai import AI


allowed = ascii_letters + "-0123456789"


class Client:
    def main(self, stdscr) -> None:
        curs_set(0)
        use_default_colors()
        data = ""
        game = Game()
        ai = AI(False, 2)
        game.setup()
        moves = game.annotate()
        help = False
        init_pair(1, COLOR_BLUE, -1)
        init_pair(2, COLOR_RED, -1)

        while True:

            if game.result is None:
                result = '     '
            elif game.result == -1:
                result = '0 - 1'
            elif game.result == 1:
                result = '1 - 0'
            elif game.result == 0:
                result = '0 - 0'
            stdscr.erase() 
            stdscr.addstr(f"White    {result}    Black\n\n")
            stdscr.addstr("    a b c d e f g h\n\n")
            for i in range(7, -1, -1):
                stdscr.addstr(f"{i + 1}   ")
                for j in range(8):
                    if (piece := game.board[i * 16 + j]):
                        stdscr.addstr(f"{repr(piece)} ", color_pair(piece.side + 1))
                    else:
                        stdscr.addstr(f"{repr(piece)} ")
                stdscr.addstr(f"  {i + 1}")
                stdscr.addch('\n')
            stdscr.addstr("\n    a b c d e f g h")

            l = len(game.record)
            for i in range(0, len(game.record), 2):
                stdscr.addstr(i // 2, 26, f"{i // 2 + 1}. {game.record[i]}{ f' - {game.record[i+1]}' if l - 1 > i else ''}")

            stdscr.addstr(15, 0, f"> {data}")

            if help:
                stdscr.addstr(17, 0, ' '.join(move for move in moves if move.startswith(data)))
    
            c = stdscr.getch()
            if c == 113:
                break
            elif c == 10:
                if data == "ai":
                    game.apply(ai.get_move(game))
                    moves = game.annotate()
                    help = False
                elif data == "exit":
                    break
                elif data == "cancel":
                    game.cancel()
                    moves = game.annotate()
                    help = False
                elif (move := moves.get(data)):
                    game.apply(move)
                    moves = game.annotate()
                    help = False
                data = ''
            elif c == 263:
                data = data[:-1]
            elif c == 9:
                help = not help
            else:
                char = chr(c)
                if char in allowed:
                    data += chr(c)
    

if __name__ == "__main__":
    client = Client()
    wrapper(client.main)

